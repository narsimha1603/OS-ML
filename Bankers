#include <stdio.h>
#include <conio.h>
#include <string.h>

void main() {
    int alloc[10][10], max[10][10], avail[10], work[10], total[10];
    int need[10][10];
    int i, j, k, n, m, count = 0, c = 0;
    char finish[10];

    clrscr();

    printf("Enter the number of processes and resources: ");
    scanf("%d %d", &n, &m);

    for (i = 0; i < n; i++)
        finish[i] = 'n';

    printf("Enter the Claim (Max) Matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &max[i][j]);

    printf("Enter the Allocation Matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);

    printf("Enter the Resource Vector (Total instances of each resource):\n");
    for (i = 0; i < m; i++)
        scanf("%d", &total[i]);

    // Calculate available resources
    for (i = 0; i < m; i++)
        avail[i] = 0;

    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            avail[j] += alloc[i][j];

    for (j = 0; j < m; j++)
        work[j] = total[j] - avail[j];

    // Calculate need matrix
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];

A:
    for (i = 0; i < n; i++) {
        c = 0;
        for (j = 0; j < m; j++) {
            if ((need[i][j] <= work[j]) && (finish[i] == 'n'))
                c++;
        }

        if (c == m) {
            printf("\nAll the resources can be allocated to Process %d", i + 1);
            printf("\nAvailable resources after allocation:");

            for (k = 0; k < m; k++) {
                work[k] += alloc[i][k];
                printf(" %d", work[k]);
            }

            finish[i] = 'y';
            printf("\nProcess %d executed? : %c\n", i + 1, finish[i]);
            count++;
        }
    }

    if (count != n)
        goto A;
    else {
        printf("\nSystem is in safe mode.");
        printf("\nThe given state is a safe state.");
    }

    getch();
}
