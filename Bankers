#include <stdio.h>
#include <string.h>

int main() {
    int alloc[10][10], max[10][10], avail[10], work[10], total[10];
    int need[10][10];
    int i, j, k, n, m, count = 0, c;
    char finish[10];

    // Input number of processes and resources
    printf("Enter the number of processes and resources: ");
    scanf("%d %d", &n, &m);

    // Initialize finish array
    for (i = 0; i < n; i++)
        finish[i] = 'n';

    // Input Max matrix
    printf("Enter the Claim (Max) Matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &max[i][j]);

    // Input Allocation matrix
    printf("Enter the Allocation Matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);

    // Input total available resources
    printf("Enter the Resource Vector (Total instances of each resource):\n");
    for (i = 0; i < m; i++)
        scanf("%d", &total[i]);

    // Calculate total allocated and then available resources
    for (i = 0; i < m; i++)
        avail[i] = 0;

    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            avail[j] += alloc[i][j];

    for (j = 0; j < m; j++)
        work[j] = total[j] - avail[j];

    // Calculate Need matrix
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];

    // Banker's Algorithm - find safe sequence
Start:
    for (i = 0; i < n; i++) {
        if (finish[i] == 'n') {
            c = 0;
            for (j = 0; j < m; j++) {
                if (need[i][j] <= work[j])
                    c++;
            }

            if (c == m) {
                printf("\nProcess %d can be safely executed.", i + 1);
                printf("\nResources after executing Process %d: ", i + 1);

                for (k = 0; k < m; k++) {
                    work[k] += alloc[i][k];
                    printf("%d ", work[k]);
                }

                finish[i] = 'y';
                count++;
            }
        }
    }

    if (count != n)
        goto Start;
    else {
        printf("\n\nSystem is in a SAFE STATE.");
        printf("\nAll processes can finish without deadlock.");
    }

    return 0;
}
