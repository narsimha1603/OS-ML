#include <stdio.h>

int isInQueue(int queue[], int size, int page) {
    for (int i = 0; i < size; i++) {
        if (queue[i] == page) return 1;
    }
    return 0;
}

void removeFirst(int queue[], int *size) {
    for (int i = 1; i < *size; i++) {
        queue[i - 1] = queue[i];
    }
    (*size)--;
}

int main() {
    int f = 3; // Number of frames
    int fault = 0;
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2};
    int n = sizeof(pages) / sizeof(pages[0]);
    int queue[100]; // FIFO queue
    int size = 0;

    for (int i = 0; i < n; i++) {
        int p = pages[i];
        if (!isInQueue(queue, size, p)) {
            if (size == f) {
                removeFirst(queue, &size); // Remove the front (oldest page)
            }
            queue[size++] = p; // Add to the end
            fault++;
        }
    }

    printf("FIFO faults: %d\n", fault);
    return 0;
}